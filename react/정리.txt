[리액트]
리액트 - 라이브러리
뷰,앵글ㄹ러 - 프레임 워크

- 리엑트 설치
	1. node.js 설치:
		npm 도 같이 설치됨
		리엑트 앱은 웹 브라우저에서 실행되는 코드여서 node.js와 직접적인 연관은 없지만,
		프로젝트를 개발하는 데 주요 도구들이 jode.js를 사용하기 때문에 필요함.
		주요 개발 도구: 바벨, 웹팩
		
		- 웹팩: 오픈 소스 자바스크립트 모듈 번들러로써 여러개로 나누어져 있는 파일들을
				하나의 자바스크립트 코드로 압축하고 최적화하는 라이브러리.
				로딩에 대한 네트워크 비용 절감.
				모듈 단위개발가능, 가독성과 유지보수 쉬움.
		- 바벨: 최신 자바스크립트 문법을 지원하지 않는 브라우저를 위해서 구형 브라우저에서도 최신 자바스크립트 문법을 돌수 있게 변환시켜주는 라이브러리.
			function() 이런 구형함수말고, 화살표 함수나 익명함수 등.
	2. vscode 설치
	3. # npx create-react-app ./ : 리액트로 프로젝트 만들기
		하면 웹팩, 바벨도 다운로드됨. 옛날에는 수동으로 다운받아야 했음.
		
		
- 컴포넌트
	함수형 컴포넌트:
		function App() {
		  return (
			<div>
			</div>
			);
		}
		export default App;
		
		
	클래스형 컴포넌트:
		export default class App extends Component{
			render(){
				return (
					<div></div>
				)
			}
		}
		
- JSX(javascript syntax extension)
	자바스크립트 확장 문법. UI 나타냄.
	HTML 로 그리는게 아니 JSX 로 그림.
	
- React State
	리액트에서 데이터가 변할 때 화면을 다시 렌더링 해주기 위해서는 React State 를 사용.
	컴포넌트의 렌더링 결과물에 영향을 주는 데이터를 갖고 있는 객체.
	State 가 변경되면 컴포넌트는 리랜더링된다.
	State는 컴포넌트 안에서 관리된다.
	
- React Hooks
	class 없이 state 사용할 수 있는 기능
	React Hooks 기능이 나오기 전 함수형 컴포넌트는 리액트 생명주기를 사용하지 못했다.
	but, React Hooks 으로 인해 함수형에서 컴포넌트 시작하자마자 API도 호출하고 많은 기능의 부분을 할 수 있게 되었다.]
	
	- HOC(Higher Order Component) 란 화면에서 재사용 가능한 로직만을 분리해서 component로 만들고, 재사용 불가능한 UI 와 같은 다른 부분들은 parameter로 받아서 처리하는 방법
		문제는 너무 많은 wrapper 컴포넌트 발생. 데이터 흐름 파악 어려움.
		그래서 Hooks 에서는 HOC 대신 Custom Hooks 을 이용해서 컴포넌트를 만들어 처리해줌. Wrapper 많아지는 현상 방지
	
	useEffect 이용
	const [name, setName] = useState("");
	
- State와 Props
	- State: 부모 -> 자녀 컴포넌트로 데이터를 보내는 것이 아닌 해당 컴포넌트 내부에서 데이터 전달. muteable(변경가능). State 변함녀 re-render
	- Props: 부모 -> 자녀 컴포넌트에 데이터 전달. immutable(읽기 전용)
	
- 구조 분해 할당(Destructuring)
	배열이나 객체의 속성을 해체하여 그 값을 개별 변수에 담을 수 있게 하는 javascript 표현식
	
- TailWindCSS
	HTML 안에서, CSS 스타일을 만들 수 있게 해주는 CSS 프레임 워크.
	
	
-컴포넌트 렌더링 최적화
	- React.memo
	- React.useCallback
		컴포넌트는 데이터가 바뀌면 리렌더링됨.
		리렌더링 되면 해당 컴포넌트에 있는 함수를 다시 만들게 됨.
		근데 함수 중 하나가 자식 컴포넌트에게 props 로 내려주게 된다면, 자식컴포넌트도 해당 컴포넌트가 리렌더링될 때 무조건 리렌더링되는 안좋은 현상이 일어남.
		-> React.useCallback() 으로 해결
	- React.useMemo
		- memoization: 비용이 많이 드는 함수 호출의 결과를 저장하고 동일한 입력이 다시 발생할 때 캐시된 결과를 반환하여 컴퓨터 프로그램속도를 높이는데 주로 사용하는 최적화 기술
		
- 넷플릭스는.. 알아서 해보기

- Next.js
	React의 SSR(server side rendering)을 쉽게 구현할 수 있게 도와주는 간단한 프레임워크.